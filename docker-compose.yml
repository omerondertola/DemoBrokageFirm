services:
  #    collector:
  #        image: otel/opentelemetry-collector:0.103.1
  #        extra_hosts: ['host.docker.internal:host-gateway']
  #        volumes:
  #            - ./docker/otel-collector/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
  #        ports:
  #            - 1888:1888 # pprof extension
  #            - 8888:8888 # Prometheus metrics exposed by the collector
  #            - 8889:8889 # Prometheus exporter metrics
  #            - 13133:13133 # health_check extension
  #            - 4318:4318 # OTLP http receiver (for metrics and spans)
  #            - 55679:55679 # zpages extension
  # OpenTelemetry Collector service
  collector:
    image: otel/opentelemetry-collector:latest # OpenTelemetry Collector image for gathering telemetry data
    extra_hosts:
      - 'host.docker.internal:host-gateway' # Maps 'host.docker.internal' to the Docker host IP for internal network access
    volumes:
      - ./docker/otel-collector/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml # Mounts the custom config file for OpenTelemetry
    ports:
      - 1888:1888   # Exposes pprof extension for profiling performance of the OpenTelemetry Collector
      - 8888:8888   # Prometheus metrics endpoint exposed by the collector
      - 8889:8889   # Prometheus exporter metrics for detailed insights
      - 13133:13133 # Health check endpoint for monitoring the collector’s status
      - 34318:4318   # OTLP HTTP receiver endpoint (for metrics and spans)
      - 55679:55679 # Zpages extension for trace monitoring

  # Prometheus monitoring service
  prometheus:
    image: prom/prometheus:latest # Prometheus image for monitoring
    extra_hosts:
      - 'host.docker.internal:host-gateway' # Enables communication between Prometheus and host network
    command:
      - --enable-feature=exemplar-storage # Enables tracing support in Prometheus with exemplars
      - --enable-feature=otlp-write-receiver # Accepts OpenTelemetry Protocol (OTLP) data for monitoring
      - --web.enable-remote-write-receiver # Enables Prometheus to receive remote write requests
      - --config.file=/etc/prometheus/prometheus.yml # Specifies the location of the Prometheus config file
    volumes:
      - prometheus:/prometheus # Stores Prometheus data persistently
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro # Mounts Prometheus config file in read-only mode
    ports:
      - "9090:9090" # Web interface and API for Prometheus

  # Grafana visualization service
  grafana:
    image: grafana/grafana:latest # Grafana image for visualizing and analyzing metrics
    extra_hosts:
      - 'host.docker.internal:host-gateway' # Enables Grafana to access host network services
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true # Allows anonymous access to Grafana (no login required)
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin # Grants Admin privileges to anonymous users for full access
      - GF_AUTH_DISABLE_LOGIN_FORM=true # Disables login form to simplify access without credentials
    volumes:
      - ./docker/grafana/grafana.ini:/etc/grafana/grafana.ini:ro # Custom configuration file for Grafana (read-only)
      - ./docker/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro # Datasource definitions (read-only)
      - ./docker/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro # Predefined dashboards (read-only)
    ports:
      - "3000:3000" # Exposes Grafana’s web interface for access

  # Tempo tracing service
  tempo:
    image: grafana/tempo:latest # Tempo image for distributed tracing
    extra_hosts:
      - 'host.docker.internal:host-gateway' # Enables Tempo to communicate with host services
    command: ['-config.file=/etc/tempo.yml'] # Specifies Tempo configuration file for tracing settings
    volumes:
      - tempo:/tmp/tempo # Stores Tempo data temporarily
      - ./docker/grafana/tempo.yml:/etc/tempo.yml:ro # Mounts Tempo config file in read-only mode
    ports:
      - "3200:3200" # Main HTTP endpoint for Tempo
      - "44318:4318" # OTLP HTTP receiver for receiving spans

  # Loki logging service
  loki:
    image: grafana/loki:latest # Loki image for log aggregation
    extra_hosts:
      - 'host.docker.internal:host-gateway' # Enables Loki to access host network
    command: ['-config.file=/etc/loki/local-config.yaml'] # Config file specifying Loki settings for log management
    ports:
      - "3100:3100" # Loki API endpoint for querying logs

# Named volumes for persistent storage
volumes:
  prometheus:
    driver: local # Local volume for storing Prometheus data
  tempo:
    driver: local # Local volume for storing Tempo data temporarily
